The following needs to be done/undone when this moves from a demo to a real app

Pipeline
- Will be deleted
- The logic here needs to be moved to the service layer and the queue
    - It also needs a substantial rewrite

App
- Determine what framework you will use in production
    - is Flask + gunicorn appropriate
    - can most of the current code be re-used
- Load the API keys for the embeddings and vector from a datastore
- Implement SQL Alchemy
- Implement Alembic
- Refactor the "main" method out of the file with the routes
- Create a database config that is shareable across the various application pieces
- Add error handling to prevent unsupported embeddings types from being turned into batches
- (MAYBE) Add error handling to ensure VDB index exists before creating batches

Worker
- Add RetryWorker class
- Add DLQ
- Add CronJob to detect hanging EmbeddingsJobs
- Add retry logic to existing code paths
    - inside embed_openai_batch
- Add document source logic to create_source_chunk_dict
- (MAYBE) Added separate metadata store writing logic
- Update logic in update_job_status to use real data service
- Determine if write_embeddings_to_pinecone should throw an exception or return None when the index is unreachable

Appliation Structure
- Needs to be rewritten for a more modular application
    - for example, should all tests be packaged with their application code?
- Each application should have its own requirements.txt 

Api directory
- Various classes in here need to be turned into model objects and moved to a share repo

Tests
- Once the application becomes more modular, each module should have its own test section
